* 元字符 与 字符转义
  列出常用的元字符
  - *\b*    代表单词的分界处，它匹配这样一个 *位置*: 它的前一个字符和后一个字符不全是\w
  - *^*     匹配字符串的开始 
  - *$*     匹配字符串的结束
  - *.*     匹配除了换行符以外的任意 *字符*
  - *\d*    匹配任意的数字
  - *\s*    匹配任意的空白符
  - *\w*    匹配字母或数字或下划线或汉字等
  - *×*     代表 *数量*，它前边的内容可以连续重复出现/任意次/以使整个表达式得到匹配
  - *+*     它前边的内容可以连续重复出现/一次或更多次/以使整个表达式得到匹配
  如果想查找元字符本身，需要使用\来对其转义。除了元字符，如果你想查找\、[、]、(、)等也需要转义
* 重复
  - *×*     重复零次或更多次
  - *+*     重复一次或更多次
  - *?*     重复零次或一次
  - *{n}*   重复n次
  - *{n,}*  重复n次或更多次
  - *{n,m}* 重复n到m次
* 字符串与反义
  我们可以使用中括号自己定义字符集，比如:
  - [aeiou] 匹配任何一个英文元音字母
  - [.?!]   匹配 . ? ! 中的任何一个标点符号
  - [a-z0-9A-Z] 匹配任何一个字母或数字
  如果需要查找除某些字符以外的情况，可以使用反义:
  - \W      匹配任意不是字母、数字、下划线、汉字的字符 
  - \S      匹配任意不是空白的字符
  - \D      匹配任意非数字的字符
  - \B      匹配不是单词开头或结束的位置
  - [^X]    匹配除了X以外的任意字符
  - [^aeiou] 匹配除了aeiou这几个字母以外的任意字符
  *栗子*: =<a[^>]+>= 匹配用尖括号括起来的以a开头的字符串
* 替换
  正则表达式中的*替换*指的是 有几种规则，如果满足其中任意一种都应该视为匹配。具体方法是用*|*把不同的规则分隔开

  *原则*: 匹配替换时，将从左到右地测试每个分支条件，如果满足了某个分支的话，就不去管其他的替换条件了

  *栗子*: \d{5}-\d{4}|\d{5} 匹配了美国邮政编码——5位数字或用连字号间隔的9位数字, 但是不能写成\d{5}|\d{5}-\d{4}
* 分组
  使用圆括号来指定子表达式

  我们可以使用如下表达式来描述一个IP地址:((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)
* 后向引用
  默认情况下，每个分组自动拥有一个组号，规则是: 从左向右，一分组的左括号为标志，地一个出现的分组的组号为1,第二个为2,一次类推

  *后向引用* 用于重复搜索前面某个分组匹配的文本。例如，\1代表分组1匹配的文本。例如: =\b(\w+)\b\s+\1\b= 可以匹配重复的单词，如go go

  如下是一些分组语法:
  - (exp)       匹配exp，并捕获文本到自动命名的组里
  - (?<name>exp> 匹配exp，并捕获文本到名称为name的组里，也可写成(?'name'exp)。通过\k<name>引用, 如\b(?<name>\w+)\b\s+\k<name>\b
  - (?:exp)     匹配exp，不捕获匹配的文本，也不给此分组分配组号
  - (?=exp)     匹配exp前面的位置
  - (?<=exp)    匹配exp后面的位置 
  - (?!exp)     匹配后面跟的不是exp的位置
  - (?<!exp)    匹配前面不是exp的位置
  - (?#comment) 注释
