* 一个简单的例子
** 目录结构
   #+BEGIN_SRC sh
   .
   ├── bin
   ├── CMakeLists.txt
   ├── include
   │   └── hello.h
   ├── lib
   └── src
       ├── CMakeLists.txt
       ├── lib
       │   ├── CMakeLists.txt
       │   └── hello.c
       └── src
           ├── CMakeLists.txt
           └── main.c
   #+END_SRC
** 源码
   ./CMakeLists.txt 
   #+BEGIN_SRC sh
   project(HELLO)
   set(INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)
   include_directories(${INCLUDE_DIR})
   add_subdirectory(src)
   #+END_SRC
   指明了头文件所在路径以及需要解析的子目录

   ./src/CMakeLists.txt
   #+BEGIN_SRC sh
   add_subdirectory(src)
   add_subdirectory(lib)
   #+END_SRC

   ./src/lib/CMakeLists.txt
   #+BEGIN_SRC sh
   set(SRC_LIST hello.c)
   set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
   # add_library(libhello ${SRC_LIST})
   add_definitions("-DLIBHELLO_BUILD")
   add_library(libhello SHARED ${SRC_LIST})
   #+END_SRC

   ./src/src/CMakeLists.txt
   #+BEGIN_SRC sh
   set(LIB_LIST libhello)
   set(SRC_LIST main.c)
   set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
   add_executable(hello ${SRC_LIST})
   target_link_libraries(hello ${LIB_LIST})
   #+END_SRC

   ./include/hello.h
   #+BEGIN_SRC c
   #ifndef _HELLO_H
   #define _HELLO_H

   #if defined _WIN32
      #if LIBHELLO_BUILD
          #define LIBHELLO_API __declspec(dllexport)
      #else
          #define LIBHELLO_API __declspec(dllimport)
      #endif
   #else
      #define LIBHELLO_API
   #endif
   LIBHELLO_API void hello();

   #endif
   #+END_SRC

   ./src/lib/hello.c
   #+BEGIN_SRC c
   #include <stdio.h>
   #include <stdlib.h>

   void hello()
   {
      printf("hello\n");
   }
   #+END_SRC

   ./src/src/main.c
   #+BEGIN_SRC c
   #include <stdio.h>
   #include <stdlib.h>

   #include "hello.h"

   int main(int argc, char *argv[])
   {
      hello();

      return 0;
   }
   #+END_SRC


